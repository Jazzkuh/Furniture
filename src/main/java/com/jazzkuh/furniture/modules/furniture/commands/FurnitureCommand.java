package com.jazzkuh.furniture.modules.furniture.commands;import com.jazzkuh.commandlib.common.annotations.*;import com.jazzkuh.commandlib.spigot.AnnotationCommand;import com.jazzkuh.furniture.framework.furniture.FurnitureSize;import com.jazzkuh.furniture.modules.data.DataModule;import com.jazzkuh.furniture.modules.furniture.FurnitureModule;import com.jazzkuh.furniture.modules.furniture.models.FurnitureModel;import com.jazzkuh.furniture.utils.ChatUtils;import com.jazzkuh.furniture.utils.ItemBuilder;import lombok.AllArgsConstructor;import org.bukkit.Material;import org.bukkit.entity.ItemDisplay;import org.bukkit.entity.Player;import org.bukkit.inventory.ItemStack;@Command("furniture")@AllArgsConstructorpublic class FurnitureCommand extends AnnotationCommand {    private FurnitureModule furnitureModule;    private DataModule dataModule;    @Main    @Permission("furniture.commands.furniture")    public void main(Player player) {        formatUsage(player);    }    @Subcommand("create")    @Usage("<identifier> <isLarge> [transparency]")    @Permission("furniture.commands.furniture.create")    public void create(Player player, String identifier, Boolean isLarge, @Optional Boolean transparency) {        ItemStack itemStack = player.getInventory().getItemInMainHand();        if (itemStack.getType() == Material.AIR) {            player.sendMessage(ChatUtils.prefix("Furniture", "<error>You must be holding an item to create furniture."));            return;        }        if (furnitureModule.getCustomBlocks().containsKey(identifier)) {            player.sendMessage(ChatUtils.prefix("Furniture","<error>Furniture with that identifier already exists."));            return;        }        if (transparency == null) transparency = false;        ItemBuilder itemBuilder = new ItemBuilder(itemStack.clone())                .setName("<primary>" + identifier)                .addLoreLine("<gray>Click to place furniture.")                .setNBT("furniture_identifier", identifier)                .setNBT("furniture_transparent", transparency)                .setNBT("furniture_size", isLarge ? FurnitureSize.LARGE.name() : FurnitureSize.SMALL.name());        FurnitureModel furnitureModel = new FurnitureModel(identifier);        furnitureModel.setItemStack(itemBuilder.toItemStack());        dataModule.getMongoScope().saveAsync(furnitureModel).whenComplete((savedModel, throwable) -> {            if (throwable != null) {                player.sendMessage(ChatUtils.prefix("Furniture", "<error>There was an error saving the furniture."));                throwable.printStackTrace();                return;            }            player.sendMessage(ChatUtils.prefix("Furniture", "<gray>Successfully created furniture."));            furnitureModule.getCustomBlocks().put(identifier, furnitureModel);        });    }    @Subcommand("delete")    @Usage("<identifier>")    @Permission("furniture.commands.furniture.delete")    public void delete(Player player, FurnitureModel furnitureModel) {        String identifier = furnitureModel.getKey();        dataModule.getMongoScope().deleteAsync(furnitureModel).whenComplete((deletedModel, throwable) -> {            if (throwable != null) {                player.sendMessage(ChatUtils.prefix("Furniture", "<error>There was an error deleting furniture."));                throwable.printStackTrace();                return;            }            player.sendMessage(ChatUtils.prefix("Furniture", "<gray>Successfully deleted furniture."));            furnitureModule.getCustomBlocks().remove(identifier);        });    }    @Subcommand("get")    @Usage("<identifier>")    @Permission("furniture.commands.furniture.get")    public void get(Player player, FurnitureModel furnitureModel) {        player.getInventory().addItem(furnitureModel.getItemStack());        player.sendMessage(ChatUtils.prefix("Furniture", "<gray>Successfully added furniture to your inventory."));    }}